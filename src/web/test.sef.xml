<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://ns.saxonica.com/xslt/export" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vv="http://saxon.sf.net/generated-variable" xmlns:java-type="http://saxon.sf.net/java-type" expiry="2017-10-12" version="20" packageVersion="1" saxonVersion="9.8.0.3" target="JS" relocatable="false">
 <co id="0" binds="0 0 0">
  <mode onNo="TC" flags="dW" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="1" rank="0" minImp="0" slots="0" flags="s" line="8" module="file:/Users/cothren2/Desktop/testing%20the%20juice/juix/src/xsl/test.xsl">
    <p.nodeTest role="match" test="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);"/>
    <sequence role="action" baseUri="file:/Users/cothren2/Desktop/testing%20the%20juice/juix/src/xsl/test.xsl" ns="xsl=~ js=~" line="9">
     <resultDoc global="#&#xA;#Tue Sep 12 14:02:59 PDT 2017&#xA;indent=yes&#xA;method=html&#xA;" local="#&#xA;#Tue Sep 12 14:02:59 PDT 2017&#xA;">
      <str role="href" val="#header"/>
      <elem role="content" name="hr" namespaces="js">
       <empty/>
      </elem>
     </resultDoc>
     <resultDoc line="12" global="#&#xA;#Tue Sep 12 14:02:59 PDT 2017&#xA;indent=yes&#xA;method=html&#xA;" local="#&#xA;#Tue Sep 12 14:02:59 PDT 2017&#xA;">
      <str role="href" val="#editor"/>
      <elem role="content" line="13" name="table" namespaces="js">
       <sequence>
        <att name="border" flags="l">
         <str val="1"/>
        </att>
        <elem line="14" name="tr" flags="l">
         <sequence>
          <att name="bgcolor" flags="l">
           <str val="#999999"/>
          </att>
          <elem line="15" name="th" flags="l">
           <sequence>
            <att name="colspan" flags="l">
             <str val="2"/>
            </att>
            <valueOf flags="Sl">
             <str val="Form"/>
            </valueOf>
           </sequence>
          </elem>
         </sequence>
        </elem>
        <applyT line="17" bSlot="0">
         <slash role="select">
          <axis name="child" nodeTest="element(Q{}data)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='data';"/>
          <axis name="child" nodeTest="element(Q{}name)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='name';"/>
         </slash>
        </applyT>
        <applyT line="18" bSlot="1">
         <slash role="select">
          <axis name="child" nodeTest="element(Q{}data)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='data';"/>
          <axis name="child" nodeTest="element(Q{}phone)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='phone';"/>
         </slash>
        </applyT>
        <applyT line="19" bSlot="2">
         <slash role="select">
          <axis name="child" nodeTest="element(Q{}data)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='data';"/>
          <axis name="child" nodeTest="element(Q{}juix-datepicker)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='juix-datepicker';"/>
         </slash>
        </applyT>
       </sequence>
      </elem>
     </resultDoc>
     <resultDoc line="22" global="#&#xA;#Tue Sep 12 14:02:59 PDT 2017&#xA;indent=yes&#xA;method=html&#xA;" local="#&#xA;#Tue Sep 12 14:02:59 PDT 2017&#xA;">
      <str role="href" val="#footer"/>
      <elem role="content" name="hr" namespaces="js">
       <empty/>
      </elem>
     </resultDoc>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="0" rank="1" minImp="0" slots="0" flags="s" line="7" module="file:/Users/cothren2/Desktop/testing%20the%20juice/juix/src/xsl/juix-datepicker.xsl">
    <p.nodeTest role="match" test="element(Q{}juix-datepicker)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='juix-datepicker';"/>
    <elem role="action" baseUri="file:/Users/cothren2/Desktop/testing%20the%20juice/juix/src/xsl/juix-datepicker.xsl" ns="xsl=~ js=~" line="9" name="tr" namespaces="js">
     <sequence>
      <elem name="td" flags="l">
       <valueOf flags="Sl">
        <str val="Date:"/>
       </valueOf>
      </elem>
      <elem line="11" name="td" flags="l">
       <sequence line="12">
        <elem name="input" flags="l">
         <sequence>
          <att name="type" flags="l">
           <str val="text"/>
          </att>
          <att name="id" flags="l">
           <fn name="concat">
            <str val="datepicker"/>
            <convert from="xs:integer" to="xs:string">
             <fn name="position"/>
            </convert>
           </fn>
          </att>
         </sequence>
        </elem>
        <elem line="13" name="script" flags="l">
         <valueOf flags="el">
          <fn name="concat">
           <str val="initDP('#datepicker"/>
           <convert from="xs:integer" to="xs:string">
            <fn name="position"/>
           </convert>
           <str val="', '"/>
           <fn line="11" name="string-join">
            <sequence>
             <attVal name="Q{}month" chk="0"/>
             <attVal name="Q{}day" chk="0"/>
             <attVal name="Q{}year" chk="0"/>
            </sequence>
            <str val="/"/>
           </fn>
           <str val="')"/>
          </fn>
         </valueOf>
        </elem>
       </sequence>
      </elem>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="2" rank="1" minImp="0" slots="0" flags="s" line="27" module="file:/Users/cothren2/Desktop/testing%20the%20juice/juix/src/xsl/test.xsl">
    <p.nodeTest role="match" test="element(Q{}name)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='name';"/>
    <elem role="action" baseUri="file:/Users/cothren2/Desktop/testing%20the%20juice/juix/src/xsl/test.xsl" ns="xsl=~ js=~" line="29" name="tr" namespaces="js">
     <sequence>
      <elem name="td" flags="l">
       <valueOf flags="Sl">
        <str val="Name:"/>
       </valueOf>
      </elem>
      <elem line="31" name="td" flags="l">
       <valueOf flags="l">
        <fn name="string-join">
         <sequence>
          <attVal name="Q{}first" chk="0"/>
          <attVal name="Q{}middle" chk="0"/>
          <attVal name="Q{}last" chk="0"/>
         </sequence>
         <str val=" "/>
        </fn>
       </valueOf>
      </elem>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="3" rank="1" minImp="0" slots="0" flags="s" line="36" module="file:/Users/cothren2/Desktop/testing%20the%20juice/juix/src/xsl/test.xsl">
    <p.nodeTest role="match" test="element(Q{}phone)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='phone';"/>
    <elem role="action" baseUri="file:/Users/cothren2/Desktop/testing%20the%20juice/juix/src/xsl/test.xsl" ns="xsl=~ js=~" line="38" name="tr" namespaces="js">
     <sequence>
      <elem name="td" flags="l">
       <valueOf flags="Sl">
        <str val="Phone:"/>
       </valueOf>
      </elem>
      <elem line="40" name="td" flags="l">
       <sequence>
        <valueOf flags="Sl">
         <str val="("/>
        </valueOf>
        <valueOf flags="l">
         <convert from="xs:untypedAtomic" to="xs:string">
          <attVal name="Q{}area" chk="0"/>
         </convert>
        </valueOf>
        <valueOf flags="Sl">
         <str val=")"/>
        </valueOf>
        <valueOf line="41" flags="l">
         <convert from="xs:untypedAtomic" to="xs:string">
          <attVal name="Q{}prefix" chk="0"/>
         </convert>
        </valueOf>
        <valueOf flags="Sl">
         <str val="-"/>
        </valueOf>
        <valueOf line="42" flags="l">
         <convert from="xs:untypedAtomic" to="xs:string">
          <attVal name="Q{}number" chk="0"/>
         </convert>
        </valueOf>
       </sequence>
      </elem>
     </sequence>
    </elem>
   </templateRule>
  </mode>
 </co>
 <overridden/>
 <output>
  <property name="indent" value="yes"/>
  <property name="{http://saxon.sf.net/}stylesheet-version" value="20"/>
  <property name="method" value="html"/>
 </output>
 <decimalFormat/>
</package>
<?Î£ 1e256752?>
